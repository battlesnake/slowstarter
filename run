#!/bin/bash

set -Eeuo pipefail

declare -ri iter=5000

sudo renice -n -15 -p "$$"

cd "$(dirname "$0")"

rm -rf -- bin
mkdir -p -- bin

echo >bin/source
echo >bin/sh
echo >bin/bash
echo >bin/perl
echo >bin/node
echo >bin/python2.7
echo >bin/python3.6
gcc -O2 -m32 -s -ffunction-sections -fdata-sections -Wl,--gc-sections -o bin/c32 -x c c
gcc -O2 -m64 -s -ffunction-sections -fdata-sections -Wl,--gc-sections -o bin/c64 -x c c
g++ -O2 -m32 -s -ffunction-sections -fdata-sections -Wl,--gc-sections -o bin/cpp32 -x c++ cpp
g++ -O2 -m64 -s -ffunction-sections -fdata-sections -Wl,--gc-sections -o bin/cpp64 -x c++ cpp
javac -d bin -g:none java.java
mcs -optimize+ -out:bin/csharp csharp.cs

function now {
	node -p '+new Date'
}

function burn {
	# Get CPU to full speed (speedstep/turbo)
	local -ir t1=$(now)+2000
	while (( $(now) < t1 )); do
		:
	done
}

function measure {
	set -e
	taskset -ap 0xFFFF $$ &>/dev/null
	local -r cmd="$1"
	local -i t1
	local -i t2
	local -i dt
	local -i x
	# Run a few times before clocking, to prime cache
	for ((x=0; x < 10; x++)); do
		$cmd
	done
	# Measure
	t1=$(now)
	for ((x=0; x<iter; x++)); do
		$cmd
	done
	t2=$(now)
	let dt=t2-t1
	echo "$dt"
}

function measure1 {
	taskset -ap 0x0001 $$ &>/dev/null
	measure "$@"
	taskset -ap 0xFFFF $$ &>/dev/null
}

function ram {
	set -e
	local -r cmd="$1"
	local -ri count=30
	local -i sum=0
	for ((x=0; x<count; x++)); do
		let sum+="$("$(which time)" -f '%M' -- $cmd 2>&1)"
	done
	echo "$((sum / count))"
}

function main {
	burn

	gcc -O2 -m64 -masm=intel -s -ffunction-sections -fdata-sections -Wl,--gc-sections -o bin/cpuspeed cpuspeed.S cpuspeed.c
	local -ir cpuspeed="$(sudo taskset 0x01 ./bin/cpuspeed 2>/dev/null)"
	rm -f -- bin/cpuspeed

	printf "CPU speed: %s Hz\n\n" "$cpuspeed" | tee cpuinfo.txt >&2
	grep -Ei '^(processor|model name|bogomips)\s*:' /proc/cpuinfo >> cpuinfo.txt


	# Measure dumb fork-exec'd program for reference
	local prog
	local cmd
	local -i tmulti
	local -i tsingle
	local -i mem
	local desc
	local progbase
	local -i normal

	local -ri ref="$(measure /bin/true)"

	printf "%s\t" 'Test' 'RAM usage (MB)' 'ms/run, multi-core' 'relative, multi-core' 'ms/run, single-core' 'relative, single-core'
	printf "\n"

	# Benchmark
	for prog in : /bin/true ./bin/*; do
		progbase="$(basename "$prog")"
		desc="$progbase"
		normal=1
		case "$progbase" in
		c*)
			cmd="$prog"
			;;
		Java.class)
			cmd="java -cp bin Java"
			desc='java'
			;;
		:)
			cmd="$prog"
			desc='no-op'
			normal=0
			;;
		true)
			cmd="$prog"
			desc='reference'
			;;
		source)
			normal=0
			desc='sourced script'
			;&
		*)
			cmd="$progbase $prog"
			;;
		esac
		let tmulti="$(measure "$cmd")" || true
		printf "%s\t" "$desc"
		if (( normal )); then
			let mem="$(ram "$cmd")" || true
			let tsingle="$(measure1 "$cmd")" || true
			printf -- "%1.1f\t" "$(echo "$mem/1024" | bc -l )"
			printf -- "%1.2f\t%1.3f\t" "$(echo "$tmulti/$iter" | bc -l)" "$(echo "$tmulti/$ref" | bc -l)"
			printf -- "%1.2f\t%1.3f\t" "$(echo "$tsingle/$iter" | bc -l)" "$(echo "$tsingle/$ref" | bc -l)"
		else
			let mem=0 || true
			let tsingle=0 || true
			printf -- "%s\t" '-'
			printf -- "%1.2f\t%1.3f\t" "$(echo "$tmulti/$iter" | bc -l)" "$(echo "$tmulti/$ref" | bc -l)"
			printf -- "%s\t%s\t" '-' '-'
		fi
		printf -- "\n"
	done
}

main | tee results.tsv | column -ts$'\t'
